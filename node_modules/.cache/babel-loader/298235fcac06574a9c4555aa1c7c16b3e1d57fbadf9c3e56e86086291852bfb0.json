{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createRm = configure(api => {\n  async function* rm(cid, options = {}) {\n    if (!Array.isArray(cid)) {\n      cid = [cid];\n    }\n    const res = await api.post('block/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.map(cid => cid.toString()),\n        'stream-channels': true,\n        ...options\n      }),\n      headers: options.headers\n    });\n    for await (const removed of res.ndjson()) {\n      yield toCoreInterface(removed);\n    }\n  }\n  return rm;\n});\nfunction toCoreInterface(removed) {\n  const out = {\n    cid: CID.parse(removed.Hash)\n  };\n  if (removed.Error) {\n    out.error = new Error(removed.Error);\n  }\n  return out;\n}","map":{"version":3,"names":["CID","configure","toUrlSearchParams","createRm","api","rm","cid","options","Array","isArray","res","post","signal","searchParams","arg","map","toString","headers","removed","ndjson","toCoreInterface","out","parse","Hash","Error","error"],"sources":["/home/juan-ubuntu/marketplace/node_modules/ipfs-http-client/esm/src/block/rm.js"],"sourcesContent":["import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createRm = configure(api => {\n  async function* rm(cid, options = {}) {\n    if (!Array.isArray(cid)) {\n      cid = [cid];\n    }\n    const res = await api.post('block/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.map(cid => cid.toString()),\n        'stream-channels': true,\n        ...options\n      }),\n      headers: options.headers\n    });\n    for await (const removed of res.ndjson()) {\n      yield toCoreInterface(removed);\n    }\n  }\n  return rm;\n});\nfunction toCoreInterface(removed) {\n  const out = { cid: CID.parse(removed.Hash) };\n  if (removed.Error) {\n    out.error = new Error(removed.Error);\n  }\n  return out;\n}"],"mappings":"AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,OAAO,MAAMC,QAAQ,GAAGF,SAAS,CAACG,GAAG,IAAI;EACvC,gBAAgBC,EAAEA,CAACC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACpC,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,GAAG,CAAC,EAAE;MACvBA,GAAG,GAAG,CAACA,GAAG,CAAC;IACb;IACA,MAAMI,GAAG,GAAG,MAAMN,GAAG,CAACO,IAAI,CAAC,UAAU,EAAE;MACrCC,MAAM,EAAEL,OAAO,CAACK,MAAM;MACtBC,YAAY,EAAEX,iBAAiB,CAAC;QAC9BY,GAAG,EAAER,GAAG,CAACS,GAAG,CAACT,GAAG,IAAIA,GAAG,CAACU,QAAQ,CAAC,CAAC,CAAC;QACnC,iBAAiB,EAAE,IAAI;QACvB,GAAGT;MACL,CAAC,CAAC;MACFU,OAAO,EAAEV,OAAO,CAACU;IACnB,CAAC,CAAC;IACF,WAAW,MAAMC,OAAO,IAAIR,GAAG,CAACS,MAAM,CAAC,CAAC,EAAE;MACxC,MAAMC,eAAe,CAACF,OAAO,CAAC;IAChC;EACF;EACA,OAAOb,EAAE;AACX,CAAC,CAAC;AACF,SAASe,eAAeA,CAACF,OAAO,EAAE;EAChC,MAAMG,GAAG,GAAG;IAAEf,GAAG,EAAEN,GAAG,CAACsB,KAAK,CAACJ,OAAO,CAACK,IAAI;EAAE,CAAC;EAC5C,IAAIL,OAAO,CAACM,KAAK,EAAE;IACjBH,GAAG,CAACI,KAAK,GAAG,IAAID,KAAK,CAACN,OAAO,CAACM,KAAK,CAAC;EACtC;EACA,OAAOH,GAAG;AACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}