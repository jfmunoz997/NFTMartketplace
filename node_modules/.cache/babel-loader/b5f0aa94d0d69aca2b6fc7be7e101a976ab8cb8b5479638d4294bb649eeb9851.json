{"ast":null,"code":"import { configure } from '../lib/configure.js';\nimport { resolve } from '../lib/resolve.js';\nimport first from 'it-first';\nimport last from 'it-last';\nimport errCode from 'err-code';\nimport { createGet as createBlockGet } from '../block/get.js';\nexport const createGet = (codecs, options) => {\n  const fn = configure((api, opts) => {\n    const getBlock = createBlockGet(opts);\n    const get = async (cid, options = {}) => {\n      if (options.path) {\n        const entry = options.localResolve ? await first(resolve(cid, options.path, codecs, getBlock, options)) : await last(resolve(cid, options.path, codecs, getBlock, options));\n        const result = entry;\n        if (!result) {\n          throw errCode(new Error('Not found'), 'ERR_NOT_FOUND');\n        }\n        return result;\n      }\n      const codec = await codecs.getCodec(cid.code);\n      const block = await getBlock(cid, options);\n      const node = codec.decode(block);\n      return {\n        value: node,\n        remainderPath: ''\n      };\n    };\n    return get;\n  });\n  return fn(options);\n};","map":{"version":3,"names":["configure","resolve","first","last","errCode","createGet","createBlockGet","codecs","options","fn","api","opts","getBlock","get","cid","path","entry","localResolve","result","Error","codec","getCodec","code","block","node","decode","value","remainderPath"],"sources":["/home/juan-ubuntu/marketplace/node_modules/ipfs-http-client/esm/src/dag/get.js"],"sourcesContent":["import { configure } from '../lib/configure.js';\nimport { resolve } from '../lib/resolve.js';\nimport first from 'it-first';\nimport last from 'it-last';\nimport errCode from 'err-code';\nimport { createGet as createBlockGet } from '../block/get.js';\nexport const createGet = (codecs, options) => {\n  const fn = configure((api, opts) => {\n    const getBlock = createBlockGet(opts);\n    const get = async (cid, options = {}) => {\n      if (options.path) {\n        const entry = options.localResolve ? await first(resolve(cid, options.path, codecs, getBlock, options)) : await last(resolve(cid, options.path, codecs, getBlock, options));\n        const result = entry;\n        if (!result) {\n          throw errCode(new Error('Not found'), 'ERR_NOT_FOUND');\n        }\n        return result;\n      }\n      const codec = await codecs.getCodec(cid.code);\n      const block = await getBlock(cid, options);\n      const node = codec.decode(block);\n      return {\n        value: node,\n        remainderPath: ''\n      };\n    };\n    return get;\n  });\n  return fn(options);\n};"],"mappings":"AAAA,SAASA,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,OAAO,QAAQ,mBAAmB;AAC3C,OAAOC,KAAK,MAAM,UAAU;AAC5B,OAAOC,IAAI,MAAM,SAAS;AAC1B,OAAOC,OAAO,MAAM,UAAU;AAC9B,SAASC,SAAS,IAAIC,cAAc,QAAQ,iBAAiB;AAC7D,OAAO,MAAMD,SAAS,GAAGA,CAACE,MAAM,EAAEC,OAAO,KAAK;EAC5C,MAAMC,EAAE,GAAGT,SAAS,CAAC,CAACU,GAAG,EAAEC,IAAI,KAAK;IAClC,MAAMC,QAAQ,GAAGN,cAAc,CAACK,IAAI,CAAC;IACrC,MAAME,GAAG,GAAG,MAAAA,CAAOC,GAAG,EAAEN,OAAO,GAAG,CAAC,CAAC,KAAK;MACvC,IAAIA,OAAO,CAACO,IAAI,EAAE;QAChB,MAAMC,KAAK,GAAGR,OAAO,CAACS,YAAY,GAAG,MAAMf,KAAK,CAACD,OAAO,CAACa,GAAG,EAAEN,OAAO,CAACO,IAAI,EAAER,MAAM,EAAEK,QAAQ,EAAEJ,OAAO,CAAC,CAAC,GAAG,MAAML,IAAI,CAACF,OAAO,CAACa,GAAG,EAAEN,OAAO,CAACO,IAAI,EAAER,MAAM,EAAEK,QAAQ,EAAEJ,OAAO,CAAC,CAAC;QAC3K,MAAMU,MAAM,GAAGF,KAAK;QACpB,IAAI,CAACE,MAAM,EAAE;UACX,MAAMd,OAAO,CAAC,IAAIe,KAAK,CAAC,WAAW,CAAC,EAAE,eAAe,CAAC;QACxD;QACA,OAAOD,MAAM;MACf;MACA,MAAME,KAAK,GAAG,MAAMb,MAAM,CAACc,QAAQ,CAACP,GAAG,CAACQ,IAAI,CAAC;MAC7C,MAAMC,KAAK,GAAG,MAAMX,QAAQ,CAACE,GAAG,EAAEN,OAAO,CAAC;MAC1C,MAAMgB,IAAI,GAAGJ,KAAK,CAACK,MAAM,CAACF,KAAK,CAAC;MAChC,OAAO;QACLG,KAAK,EAAEF,IAAI;QACXG,aAAa,EAAE;MACjB,CAAC;IACH,CAAC;IACD,OAAOd,GAAG;EACZ,CAAC,CAAC;EACF,OAAOJ,EAAE,CAACD,OAAO,CAAC;AACpB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}