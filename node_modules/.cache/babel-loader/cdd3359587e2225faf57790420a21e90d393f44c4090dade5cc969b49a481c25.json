{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { configure } from './lib/configure.js';\nimport { toUrlSearchParams } from './lib/to-url-search-params.js';\nimport { createStat } from './files/stat.js';\nexport const createLs = configure((api, opts) => {\n  async function* ls(path, options = {}) {\n    const pathStr = `${path instanceof Uint8Array ? CID.decode(path) : path}`;\n    async function mapLink(link) {\n      let hash = link.Hash;\n      if (hash.includes('/')) {\n        const ipfsPath = hash.startsWith('/ipfs/') ? hash : `/ipfs/${hash}`;\n        const stats = await createStat(opts)(ipfsPath);\n        hash = stats.cid;\n      } else {\n        hash = CID.parse(hash);\n      }\n      const entry = {\n        name: link.Name,\n        path: pathStr + (link.Name ? `/${link.Name}` : ''),\n        size: link.Size,\n        cid: hash,\n        type: typeOf(link)\n      };\n      if (link.Mode) {\n        entry.mode = parseInt(link.Mode, 8);\n      }\n      if (link.Mtime !== undefined && link.Mtime !== null) {\n        entry.mtime = {\n          secs: link.Mtime\n        };\n        if (link.MtimeNsecs !== undefined && link.MtimeNsecs !== null) {\n          entry.mtime.nsecs = link.MtimeNsecs;\n        }\n      }\n      return entry;\n    }\n    const res = await api.post('ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: pathStr,\n        ...options\n      }),\n      headers: options.headers\n    });\n    for await (let result of res.ndjson()) {\n      result = result.Objects;\n      if (!result) {\n        throw new Error('expected .Objects in results');\n      }\n      result = result[0];\n      if (!result) {\n        throw new Error('expected one array in results.Objects');\n      }\n      const links = result.Links;\n      if (!Array.isArray(links)) {\n        throw new Error('expected one array in results.Objects[0].Links');\n      }\n      if (!links.length) {\n        yield mapLink(result);\n        return;\n      }\n      yield* links.map(mapLink);\n    }\n  }\n  return ls;\n});\nfunction typeOf(link) {\n  switch (link.Type) {\n    case 1:\n    case 5:\n      return 'dir';\n    case 2:\n      return 'file';\n    default:\n      return 'file';\n  }\n}","map":{"version":3,"names":["CID","configure","toUrlSearchParams","createStat","createLs","api","opts","ls","path","options","pathStr","Uint8Array","decode","mapLink","link","hash","Hash","includes","ipfsPath","startsWith","stats","cid","parse","entry","name","Name","size","Size","type","typeOf","Mode","mode","parseInt","Mtime","undefined","mtime","secs","MtimeNsecs","nsecs","res","post","signal","searchParams","arg","headers","result","ndjson","Objects","Error","links","Links","Array","isArray","length","map","Type"],"sources":["/home/juan-ubuntu/marketplace/node_modules/ipfs-http-client/esm/src/ls.js"],"sourcesContent":["import { CID } from 'multiformats/cid';\nimport { configure } from './lib/configure.js';\nimport { toUrlSearchParams } from './lib/to-url-search-params.js';\nimport { createStat } from './files/stat.js';\nexport const createLs = configure((api, opts) => {\n  async function* ls(path, options = {}) {\n    const pathStr = `${ path instanceof Uint8Array ? CID.decode(path) : path }`;\n    async function mapLink(link) {\n      let hash = link.Hash;\n      if (hash.includes('/')) {\n        const ipfsPath = hash.startsWith('/ipfs/') ? hash : `/ipfs/${ hash }`;\n        const stats = await createStat(opts)(ipfsPath);\n        hash = stats.cid;\n      } else {\n        hash = CID.parse(hash);\n      }\n      const entry = {\n        name: link.Name,\n        path: pathStr + (link.Name ? `/${ link.Name }` : ''),\n        size: link.Size,\n        cid: hash,\n        type: typeOf(link)\n      };\n      if (link.Mode) {\n        entry.mode = parseInt(link.Mode, 8);\n      }\n      if (link.Mtime !== undefined && link.Mtime !== null) {\n        entry.mtime = { secs: link.Mtime };\n        if (link.MtimeNsecs !== undefined && link.MtimeNsecs !== null) {\n          entry.mtime.nsecs = link.MtimeNsecs;\n        }\n      }\n      return entry;\n    }\n    const res = await api.post('ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: pathStr,\n        ...options\n      }),\n      headers: options.headers\n    });\n    for await (let result of res.ndjson()) {\n      result = result.Objects;\n      if (!result) {\n        throw new Error('expected .Objects in results');\n      }\n      result = result[0];\n      if (!result) {\n        throw new Error('expected one array in results.Objects');\n      }\n      const links = result.Links;\n      if (!Array.isArray(links)) {\n        throw new Error('expected one array in results.Objects[0].Links');\n      }\n      if (!links.length) {\n        yield mapLink(result);\n        return;\n      }\n      yield* links.map(mapLink);\n    }\n  }\n  return ls;\n});\nfunction typeOf(link) {\n  switch (link.Type) {\n  case 1:\n  case 5:\n    return 'dir';\n  case 2:\n    return 'file';\n  default:\n    return 'file';\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}