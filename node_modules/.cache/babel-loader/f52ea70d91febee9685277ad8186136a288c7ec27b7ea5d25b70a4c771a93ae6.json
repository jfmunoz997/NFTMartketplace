{"ast":null,"code":"import { Multibases } from 'ipfs-core-utils/multibases';\nimport { Multicodecs } from 'ipfs-core-utils/multicodecs';\nimport { Multihashes } from 'ipfs-core-utils/multihashes';\nimport * as dagPB from '@ipld/dag-pb';\nimport * as dagCBOR from '@ipld/dag-cbor';\nimport * as dagJSON from '@ipld/dag-json';\nimport * as dagJOSE from 'dag-jose';\nimport { identity } from 'multiformats/hashes/identity';\nimport { bases, hashes, codecs } from 'multiformats/basics';\nimport { createBitswap } from './bitswap/index.js';\nimport { createBlock } from './block/index.js';\nimport { createBootstrap } from './bootstrap/index.js';\nimport { createConfig } from './config/index.js';\nimport { createDag } from './dag/index.js';\nimport { createDht } from './dht/index.js';\nimport { createDiag } from './diag/index.js';\nimport { createFiles } from './files/index.js';\nimport { createKey } from './key/index.js';\nimport { createLog } from './log/index.js';\nimport { createName } from './name/index.js';\nimport { createObject } from './object/index.js';\nimport { createPin } from './pin/index.js';\nimport { createPubsub } from './pubsub/index.js';\nimport { createRefs } from './refs/index.js';\nimport { createRepo } from './repo/index.js';\nimport { createStats } from './stats/index.js';\nimport { createSwarm } from './swarm/index.js';\nimport { createAdd } from './add.js';\nimport { createAddAll } from './add-all.js';\nimport { createCat } from './cat.js';\nimport { createCommands } from './commands.js';\nimport { createDns } from './dns.js';\nimport { createGetEndpointConfig } from './get-endpoint-config.js';\nimport { createGet } from './get.js';\nimport { createId } from './id.js';\nimport { createIsOnline } from './is-online.js';\nimport { createLs } from './ls.js';\nimport { createMount } from './mount.js';\nimport { createPing } from './ping.js';\nimport { createResolve } from './resolve.js';\nimport { createStart } from './start.js';\nimport { createStop } from './stop.js';\nimport { createVersion } from './version.js';\nimport globSourceImport from 'ipfs-utils/src/files/glob-source.js';\nexport function create(options = {}) {\n  const id = {\n    name: identity.name,\n    code: identity.code,\n    encode: id => id,\n    decode: id => id\n  };\n  const multibaseCodecs = Object.values(bases);\n  (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(base => multibaseCodecs.push(base));\n  const multibases = new Multibases({\n    bases: multibaseCodecs,\n    loadBase: options.ipld && options.ipld.loadBase\n  });\n  const blockCodecs = Object.values(codecs);\n  [dagPB, dagCBOR, dagJSON, dagJOSE, id].concat(options.ipld && options.ipld.codecs || []).forEach(codec => blockCodecs.push(codec));\n  const multicodecs = new Multicodecs({\n    codecs: blockCodecs,\n    loadCodec: options.ipld && options.ipld.loadCodec\n  });\n  const multihashHashers = Object.values(hashes);\n  (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(hasher => multihashHashers.push(hasher));\n  const multihashes = new Multihashes({\n    hashers: multihashHashers,\n    loadHasher: options.ipld && options.ipld.loadHasher\n  });\n  const client = {\n    add: createAdd(options),\n    addAll: createAddAll(options),\n    bitswap: createBitswap(options),\n    block: createBlock(options),\n    bootstrap: createBootstrap(options),\n    cat: createCat(options),\n    commands: createCommands(options),\n    config: createConfig(options),\n    dag: createDag(multicodecs, options),\n    dht: createDht(options),\n    diag: createDiag(options),\n    dns: createDns(options),\n    files: createFiles(options),\n    get: createGet(options),\n    getEndpointConfig: createGetEndpointConfig(options),\n    id: createId(options),\n    isOnline: createIsOnline(options),\n    key: createKey(options),\n    log: createLog(options),\n    ls: createLs(options),\n    mount: createMount(options),\n    name: createName(options),\n    object: createObject(multicodecs, options),\n    pin: createPin(options),\n    ping: createPing(options),\n    pubsub: createPubsub(options),\n    refs: createRefs(options),\n    repo: createRepo(options),\n    resolve: createResolve(options),\n    start: createStart(options),\n    stats: createStats(options),\n    stop: createStop(options),\n    swarm: createSwarm(options),\n    version: createVersion(options),\n    bases: multibases,\n    codecs: multicodecs,\n    hashers: multihashes\n  };\n  return client;\n}\nexport { CID } from 'multiformats/cid';\nexport { Multiaddr as multiaddr } from 'multiaddr';\nexport { default as urlSource } from 'ipfs-utils/src/files/url-source.js';\nexport const globSource = globSourceImport;","map":{"version":3,"names":["Multibases","Multicodecs","Multihashes","dagPB","dagCBOR","dagJSON","dagJOSE","identity","bases","hashes","codecs","createBitswap","createBlock","createBootstrap","createConfig","createDag","createDht","createDiag","createFiles","createKey","createLog","createName","createObject","createPin","createPubsub","createRefs","createRepo","createStats","createSwarm","createAdd","createAddAll","createCat","createCommands","createDns","createGetEndpointConfig","createGet","createId","createIsOnline","createLs","createMount","createPing","createResolve","createStart","createStop","createVersion","globSourceImport","create","options","id","name","code","encode","decode","multibaseCodecs","Object","values","ipld","forEach","base","push","multibases","loadBase","blockCodecs","concat","codec","multicodecs","loadCodec","multihashHashers","hashers","hasher","multihashes","loadHasher","client","add","addAll","bitswap","block","bootstrap","cat","commands","config","dag","dht","diag","dns","files","get","getEndpointConfig","isOnline","key","log","ls","mount","object","pin","ping","pubsub","refs","repo","resolve","start","stats","stop","swarm","version","CID","Multiaddr","multiaddr","default","urlSource","globSource"],"sources":["/home/juan-ubuntu/marketplace/node_modules/ipfs-http-client/esm/src/index.js"],"sourcesContent":["import { Multibases } from 'ipfs-core-utils/multibases';\nimport { Multicodecs } from 'ipfs-core-utils/multicodecs';\nimport { Multihashes } from 'ipfs-core-utils/multihashes';\nimport * as dagPB from '@ipld/dag-pb';\nimport * as dagCBOR from '@ipld/dag-cbor';\nimport * as dagJSON from '@ipld/dag-json';\nimport * as dagJOSE from 'dag-jose';\nimport { identity } from 'multiformats/hashes/identity';\nimport {\n  bases,\n  hashes,\n  codecs\n} from 'multiformats/basics';\nimport { createBitswap } from './bitswap/index.js';\nimport { createBlock } from './block/index.js';\nimport { createBootstrap } from './bootstrap/index.js';\nimport { createConfig } from './config/index.js';\nimport { createDag } from './dag/index.js';\nimport { createDht } from './dht/index.js';\nimport { createDiag } from './diag/index.js';\nimport { createFiles } from './files/index.js';\nimport { createKey } from './key/index.js';\nimport { createLog } from './log/index.js';\nimport { createName } from './name/index.js';\nimport { createObject } from './object/index.js';\nimport { createPin } from './pin/index.js';\nimport { createPubsub } from './pubsub/index.js';\nimport { createRefs } from './refs/index.js';\nimport { createRepo } from './repo/index.js';\nimport { createStats } from './stats/index.js';\nimport { createSwarm } from './swarm/index.js';\nimport { createAdd } from './add.js';\nimport { createAddAll } from './add-all.js';\nimport { createCat } from './cat.js';\nimport { createCommands } from './commands.js';\nimport { createDns } from './dns.js';\nimport { createGetEndpointConfig } from './get-endpoint-config.js';\nimport { createGet } from './get.js';\nimport { createId } from './id.js';\nimport { createIsOnline } from './is-online.js';\nimport { createLs } from './ls.js';\nimport { createMount } from './mount.js';\nimport { createPing } from './ping.js';\nimport { createResolve } from './resolve.js';\nimport { createStart } from './start.js';\nimport { createStop } from './stop.js';\nimport { createVersion } from './version.js';\nimport globSourceImport from 'ipfs-utils/src/files/glob-source.js';\nexport function create(options = {}) {\n  const id = {\n    name: identity.name,\n    code: identity.code,\n    encode: id => id,\n    decode: id => id\n  };\n  const multibaseCodecs = Object.values(bases);\n  (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(base => multibaseCodecs.push(base));\n  const multibases = new Multibases({\n    bases: multibaseCodecs,\n    loadBase: options.ipld && options.ipld.loadBase\n  });\n  const blockCodecs = Object.values(codecs);\n  [\n    dagPB,\n    dagCBOR,\n    dagJSON,\n    dagJOSE,\n    id\n  ].concat(options.ipld && options.ipld.codecs || []).forEach(codec => blockCodecs.push(codec));\n  const multicodecs = new Multicodecs({\n    codecs: blockCodecs,\n    loadCodec: options.ipld && options.ipld.loadCodec\n  });\n  const multihashHashers = Object.values(hashes);\n  (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(hasher => multihashHashers.push(hasher));\n  const multihashes = new Multihashes({\n    hashers: multihashHashers,\n    loadHasher: options.ipld && options.ipld.loadHasher\n  });\n  const client = {\n    add: createAdd(options),\n    addAll: createAddAll(options),\n    bitswap: createBitswap(options),\n    block: createBlock(options),\n    bootstrap: createBootstrap(options),\n    cat: createCat(options),\n    commands: createCommands(options),\n    config: createConfig(options),\n    dag: createDag(multicodecs, options),\n    dht: createDht(options),\n    diag: createDiag(options),\n    dns: createDns(options),\n    files: createFiles(options),\n    get: createGet(options),\n    getEndpointConfig: createGetEndpointConfig(options),\n    id: createId(options),\n    isOnline: createIsOnline(options),\n    key: createKey(options),\n    log: createLog(options),\n    ls: createLs(options),\n    mount: createMount(options),\n    name: createName(options),\n    object: createObject(multicodecs, options),\n    pin: createPin(options),\n    ping: createPing(options),\n    pubsub: createPubsub(options),\n    refs: createRefs(options),\n    repo: createRepo(options),\n    resolve: createResolve(options),\n    start: createStart(options),\n    stats: createStats(options),\n    stop: createStop(options),\n    swarm: createSwarm(options),\n    version: createVersion(options),\n    bases: multibases,\n    codecs: multicodecs,\n    hashers: multihashes\n  };\n  return client;\n}\nexport {\n  CID\n} from 'multiformats/cid';\nexport {\n  Multiaddr as multiaddr\n} from 'multiaddr';\nexport {\n  default as urlSource\n} from 'ipfs-utils/src/files/url-source.js';\nexport const globSource = globSourceImport;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}