{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createRmAll = configure(api => {\n  async function* rmAll(source, options = {}) {\n    for await (const {\n      path,\n      recursive\n    } of normaliseInput(source)) {\n      const searchParams = new URLSearchParams(options.searchParams);\n      searchParams.append('arg', `${path}`);\n      if (recursive != null) searchParams.set('recursive', String(recursive));\n      const res = await api.post('pin/rm', {\n        signal: options.signal,\n        headers: options.headers,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: `${path}`,\n          recursive\n        })\n      });\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) {\n          yield* pin.Pins.map(cid => CID.parse(cid));\n          continue;\n        }\n        yield CID.parse(pin);\n      }\n    }\n  }\n  return rmAll;\n});","map":{"version":3,"names":["CID","configure","normaliseInput","toUrlSearchParams","createRmAll","api","rmAll","source","options","path","recursive","searchParams","URLSearchParams","append","set","String","res","post","signal","headers","arg","pin","ndjson","Pins","map","cid","parse"],"sources":["/home/juan-ubuntu/marketplace/node_modules/ipfs-http-client/esm/src/pin/rm-all.js"],"sourcesContent":["import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createRmAll = configure(api => {\n  async function* rmAll(source, options = {}) {\n    for await (const {path, recursive} of normaliseInput(source)) {\n      const searchParams = new URLSearchParams(options.searchParams);\n      searchParams.append('arg', `${ path }`);\n      if (recursive != null)\n        searchParams.set('recursive', String(recursive));\n      const res = await api.post('pin/rm', {\n        signal: options.signal,\n        headers: options.headers,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: `${ path }`,\n          recursive\n        })\n      });\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) {\n          yield* pin.Pins.map(cid => CID.parse(cid));\n          continue;\n        }\n        yield CID.parse(pin);\n      }\n    }\n  }\n  return rmAll;\n});"],"mappings":"AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,cAAc,QAAQ,sCAAsC;AACrE,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,OAAO,MAAMC,WAAW,GAAGH,SAAS,CAACI,GAAG,IAAI;EAC1C,gBAAgBC,KAAKA,CAACC,MAAM,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC1C,WAAW,MAAM;MAACC,IAAI;MAAEC;IAAS,CAAC,IAAIR,cAAc,CAACK,MAAM,CAAC,EAAE;MAC5D,MAAMI,YAAY,GAAG,IAAIC,eAAe,CAACJ,OAAO,CAACG,YAAY,CAAC;MAC9DA,YAAY,CAACE,MAAM,CAAC,KAAK,EAAG,GAAGJ,IAAM,EAAC,CAAC;MACvC,IAAIC,SAAS,IAAI,IAAI,EACnBC,YAAY,CAACG,GAAG,CAAC,WAAW,EAAEC,MAAM,CAACL,SAAS,CAAC,CAAC;MAClD,MAAMM,GAAG,GAAG,MAAMX,GAAG,CAACY,IAAI,CAAC,QAAQ,EAAE;QACnCC,MAAM,EAAEV,OAAO,CAACU,MAAM;QACtBC,OAAO,EAAEX,OAAO,CAACW,OAAO;QACxBR,YAAY,EAAER,iBAAiB,CAAC;UAC9B,GAAGK,OAAO;UACVY,GAAG,EAAG,GAAGX,IAAM,EAAC;UAChBC;QACF,CAAC;MACH,CAAC,CAAC;MACF,WAAW,MAAMW,GAAG,IAAIL,GAAG,CAACM,MAAM,CAAC,CAAC,EAAE;QACpC,IAAID,GAAG,CAACE,IAAI,EAAE;UACZ,OAAOF,GAAG,CAACE,IAAI,CAACC,GAAG,CAACC,GAAG,IAAIzB,GAAG,CAAC0B,KAAK,CAACD,GAAG,CAAC,CAAC;UAC1C;QACF;QACA,MAAMzB,GAAG,CAAC0B,KAAK,CAACL,GAAG,CAAC;MACtB;IACF;EACF;EACA,OAAOf,KAAK;AACd,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}