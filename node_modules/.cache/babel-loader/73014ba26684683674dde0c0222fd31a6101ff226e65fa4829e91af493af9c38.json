{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { objectToCamelWithMetadata } from '../lib/object-to-camel-with-metadata.js';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createLs = configure(api => {\n  async function* ls(path, options = {}) {\n    if (!path) {\n      throw new Error('ipfs.files.ls requires a path');\n    }\n    const res = await api.post('files/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: CID.asCID(path) ? `/ipfs/${path}` : path,\n        long: true,\n        ...options,\n        stream: true\n      }),\n      headers: options.headers\n    });\n    for await (const result of res.ndjson()) {\n      if ('Entries' in result) {\n        for (const entry of result.Entries || []) {\n          yield toCoreInterface(objectToCamelWithMetadata(entry));\n        }\n      } else {\n        yield toCoreInterface(objectToCamelWithMetadata(result));\n      }\n    }\n  }\n  return ls;\n});\nfunction toCoreInterface(entry) {\n  if (entry.hash) {\n    entry.cid = CID.parse(entry.hash);\n  }\n  delete entry.hash;\n  entry.type = entry.type === 1 ? 'directory' : 'file';\n  return entry;\n}","map":{"version":3,"names":["CID","objectToCamelWithMetadata","configure","toUrlSearchParams","createLs","api","ls","path","options","Error","res","post","signal","searchParams","arg","asCID","long","stream","headers","result","ndjson","entry","Entries","toCoreInterface","hash","cid","parse","type"],"sources":["/home/juan-ubuntu/marketplace/node_modules/ipfs-http-client/esm/src/files/ls.js"],"sourcesContent":["import { CID } from 'multiformats/cid';\nimport { objectToCamelWithMetadata } from '../lib/object-to-camel-with-metadata.js';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createLs = configure(api => {\n  async function* ls(path, options = {}) {\n    if (!path) {\n      throw new Error('ipfs.files.ls requires a path');\n    }\n    const res = await api.post('files/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: CID.asCID(path) ? `/ipfs/${ path }` : path,\n        long: true,\n        ...options,\n        stream: true\n      }),\n      headers: options.headers\n    });\n    for await (const result of res.ndjson()) {\n      if ('Entries' in result) {\n        for (const entry of result.Entries || []) {\n          yield toCoreInterface(objectToCamelWithMetadata(entry));\n        }\n      } else {\n        yield toCoreInterface(objectToCamelWithMetadata(result));\n      }\n    }\n  }\n  return ls;\n});\nfunction toCoreInterface(entry) {\n  if (entry.hash) {\n    entry.cid = CID.parse(entry.hash);\n  }\n  delete entry.hash;\n  entry.type = entry.type === 1 ? 'directory' : 'file';\n  return entry;\n}"],"mappings":"AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,yBAAyB,QAAQ,yCAAyC;AACnF,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,OAAO,MAAMC,QAAQ,GAAGF,SAAS,CAACG,GAAG,IAAI;EACvC,gBAAgBC,EAAEA,CAACC,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACrC,IAAI,CAACD,IAAI,EAAE;MACT,MAAM,IAAIE,KAAK,CAAC,+BAA+B,CAAC;IAClD;IACA,MAAMC,GAAG,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,UAAU,EAAE;MACrCC,MAAM,EAAEJ,OAAO,CAACI,MAAM;MACtBC,YAAY,EAAEV,iBAAiB,CAAC;QAC9BW,GAAG,EAAEd,GAAG,CAACe,KAAK,CAACR,IAAI,CAAC,GAAI,SAASA,IAAM,EAAC,GAAGA,IAAI;QAC/CS,IAAI,EAAE,IAAI;QACV,GAAGR,OAAO;QACVS,MAAM,EAAE;MACV,CAAC,CAAC;MACFC,OAAO,EAAEV,OAAO,CAACU;IACnB,CAAC,CAAC;IACF,WAAW,MAAMC,MAAM,IAAIT,GAAG,CAACU,MAAM,CAAC,CAAC,EAAE;MACvC,IAAI,SAAS,IAAID,MAAM,EAAE;QACvB,KAAK,MAAME,KAAK,IAAIF,MAAM,CAACG,OAAO,IAAI,EAAE,EAAE;UACxC,MAAMC,eAAe,CAACtB,yBAAyB,CAACoB,KAAK,CAAC,CAAC;QACzD;MACF,CAAC,MAAM;QACL,MAAME,eAAe,CAACtB,yBAAyB,CAACkB,MAAM,CAAC,CAAC;MAC1D;IACF;EACF;EACA,OAAOb,EAAE;AACX,CAAC,CAAC;AACF,SAASiB,eAAeA,CAACF,KAAK,EAAE;EAC9B,IAAIA,KAAK,CAACG,IAAI,EAAE;IACdH,KAAK,CAACI,GAAG,GAAGzB,GAAG,CAAC0B,KAAK,CAACL,KAAK,CAACG,IAAI,CAAC;EACnC;EACA,OAAOH,KAAK,CAACG,IAAI;EACjBH,KAAK,CAACM,IAAI,GAAGN,KAAK,CAACM,IAAI,KAAK,CAAC,GAAG,WAAW,GAAG,MAAM;EACpD,OAAON,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}