{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { configure } from '../../lib/configure.js';\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js';\nimport { abortSignal } from '../../lib/abort-signal.js';\nexport const createSetData = configure(api => {\n  async function setData(cid, data, options = {}) {\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    const res = await api.post('object/patch/set-data', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: [`${cid}`],\n        ...options\n      }),\n      ...(await multipartRequest([data], controller, options.headers))\n    });\n    const {\n      Hash\n    } = await res.json();\n    return CID.parse(Hash);\n  }\n  return setData;\n});","map":{"version":3,"names":["CID","multipartRequest","configure","toUrlSearchParams","abortSignal","createSetData","api","setData","cid","data","options","controller","AbortController","signal","res","post","searchParams","arg","headers","Hash","json","parse"],"sources":["/home/juan-ubuntu/marketplace/node_modules/ipfs-http-client/esm/src/object/patch/set-data.js"],"sourcesContent":["import { CID } from 'multiformats/cid';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { configure } from '../../lib/configure.js';\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js';\nimport { abortSignal } from '../../lib/abort-signal.js';\nexport const createSetData = configure(api => {\n  async function setData(cid, data, options = {}) {\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    const res = await api.post('object/patch/set-data', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: [`${ cid }`],\n        ...options\n      }),\n      ...await multipartRequest([data], controller, options.headers)\n    });\n    const {Hash} = await res.json();\n    return CID.parse(Hash);\n  }\n  return setData;\n});"],"mappings":"AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,gBAAgB,QAAQ,mCAAmC;AACpE,SAASC,SAAS,QAAQ,wBAAwB;AAClD,SAASC,iBAAiB,QAAQ,mCAAmC;AACrE,SAASC,WAAW,QAAQ,2BAA2B;AACvD,OAAO,MAAMC,aAAa,GAAGH,SAAS,CAACI,GAAG,IAAI;EAC5C,eAAeC,OAAOA,CAACC,GAAG,EAAEC,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC9C,MAAMC,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;IACxC,MAAMC,MAAM,GAAGT,WAAW,CAACO,UAAU,CAACE,MAAM,EAAEH,OAAO,CAACG,MAAM,CAAC;IAC7D,MAAMC,GAAG,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,uBAAuB,EAAE;MAClDF,MAAM;MACNG,YAAY,EAAEb,iBAAiB,CAAC;QAC9Bc,GAAG,EAAE,CAAE,GAAGT,GAAK,EAAC,CAAC;QACjB,GAAGE;MACL,CAAC,CAAC;MACF,IAAG,MAAMT,gBAAgB,CAAC,CAACQ,IAAI,CAAC,EAAEE,UAAU,EAAED,OAAO,CAACQ,OAAO,CAAC;IAChE,CAAC,CAAC;IACF,MAAM;MAACC;IAAI,CAAC,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,CAAC;IAC/B,OAAOpB,GAAG,CAACqB,KAAK,CAACF,IAAI,CAAC;EACxB;EACA,OAAOZ,OAAO;AAChB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}