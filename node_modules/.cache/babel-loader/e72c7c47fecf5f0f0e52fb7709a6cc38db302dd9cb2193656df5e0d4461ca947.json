{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nfunction toPin(type, cid, metadata) {\n  const pin = {\n    type,\n    cid: CID.parse(cid)\n  };\n  if (metadata) {\n    pin.metadata = metadata;\n  }\n  return pin;\n}\nexport const createLs = configure(api => {\n  async function* ls(options = {}) {\n    let paths = [];\n    if (options.paths) {\n      paths = Array.isArray(options.paths) ? options.paths : [options.paths];\n    }\n    const res = await api.post('pin/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        arg: paths.map(path => `${path}`),\n        stream: true\n      }),\n      headers: options.headers\n    });\n    for await (const pin of res.ndjson()) {\n      if (pin.Keys) {\n        for (const cid of Object.keys(pin.Keys)) {\n          yield toPin(pin.Keys[cid].Type, cid, pin.Keys[cid].Metadata);\n        }\n        return;\n      }\n      yield toPin(pin.Type, pin.Cid, pin.Metadata);\n    }\n  }\n  return ls;\n});","map":{"version":3,"names":["CID","configure","toUrlSearchParams","toPin","type","cid","metadata","pin","parse","createLs","api","ls","options","paths","Array","isArray","res","post","signal","searchParams","arg","map","path","stream","headers","ndjson","Keys","Object","keys","Type","Metadata","Cid"],"sources":["/home/juan-ubuntu/marketplace/node_modules/ipfs-http-client/esm/src/pin/ls.js"],"sourcesContent":["import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nfunction toPin(type, cid, metadata) {\n  const pin = {\n    type,\n    cid: CID.parse(cid)\n  };\n  if (metadata) {\n    pin.metadata = metadata;\n  }\n  return pin;\n}\nexport const createLs = configure(api => {\n  async function* ls(options = {}) {\n    let paths = [];\n    if (options.paths) {\n      paths = Array.isArray(options.paths) ? options.paths : [options.paths];\n    }\n    const res = await api.post('pin/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        arg: paths.map(path => `${ path }`),\n        stream: true\n      }),\n      headers: options.headers\n    });\n    for await (const pin of res.ndjson()) {\n      if (pin.Keys) {\n        for (const cid of Object.keys(pin.Keys)) {\n          yield toPin(pin.Keys[cid].Type, cid, pin.Keys[cid].Metadata);\n        }\n        return;\n      }\n      yield toPin(pin.Type, pin.Cid, pin.Metadata);\n    }\n  }\n  return ls;\n});"],"mappings":"AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,KAAKA,CAACC,IAAI,EAAEC,GAAG,EAAEC,QAAQ,EAAE;EAClC,MAAMC,GAAG,GAAG;IACVH,IAAI;IACJC,GAAG,EAAEL,GAAG,CAACQ,KAAK,CAACH,GAAG;EACpB,CAAC;EACD,IAAIC,QAAQ,EAAE;IACZC,GAAG,CAACD,QAAQ,GAAGA,QAAQ;EACzB;EACA,OAAOC,GAAG;AACZ;AACA,OAAO,MAAME,QAAQ,GAAGR,SAAS,CAACS,GAAG,IAAI;EACvC,gBAAgBC,EAAEA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC/B,IAAIC,KAAK,GAAG,EAAE;IACd,IAAID,OAAO,CAACC,KAAK,EAAE;MACjBA,KAAK,GAAGC,KAAK,CAACC,OAAO,CAACH,OAAO,CAACC,KAAK,CAAC,GAAGD,OAAO,CAACC,KAAK,GAAG,CAACD,OAAO,CAACC,KAAK,CAAC;IACxE;IACA,MAAMG,GAAG,GAAG,MAAMN,GAAG,CAACO,IAAI,CAAC,QAAQ,EAAE;MACnCC,MAAM,EAAEN,OAAO,CAACM,MAAM;MACtBC,YAAY,EAAEjB,iBAAiB,CAAC;QAC9B,GAAGU,OAAO;QACVQ,GAAG,EAAEP,KAAK,CAACQ,GAAG,CAACC,IAAI,IAAK,GAAGA,IAAM,EAAC,CAAC;QACnCC,MAAM,EAAE;MACV,CAAC,CAAC;MACFC,OAAO,EAAEZ,OAAO,CAACY;IACnB,CAAC,CAAC;IACF,WAAW,MAAMjB,GAAG,IAAIS,GAAG,CAACS,MAAM,CAAC,CAAC,EAAE;MACpC,IAAIlB,GAAG,CAACmB,IAAI,EAAE;QACZ,KAAK,MAAMrB,GAAG,IAAIsB,MAAM,CAACC,IAAI,CAACrB,GAAG,CAACmB,IAAI,CAAC,EAAE;UACvC,MAAMvB,KAAK,CAACI,GAAG,CAACmB,IAAI,CAACrB,GAAG,CAAC,CAACwB,IAAI,EAAExB,GAAG,EAAEE,GAAG,CAACmB,IAAI,CAACrB,GAAG,CAAC,CAACyB,QAAQ,CAAC;QAC9D;QACA;MACF;MACA,MAAM3B,KAAK,CAACI,GAAG,CAACsB,IAAI,EAAEtB,GAAG,CAACwB,GAAG,EAAExB,GAAG,CAACuB,QAAQ,CAAC;IAC9C;EACF;EACA,OAAOnB,EAAE;AACX,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}