{"ast":null,"code":"import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { SendingQuery, PeerResponse, FinalPeer, QueryError, Provider, Value, AddingPeer, DialingPeer } from './response-types.js';\nimport { Multiaddr } from 'multiaddr';\nexport const mapEvent = event => {\n  if (event.Type === SendingQuery) {\n    return {\n      to: event.ID,\n      name: 'SENDING_QUERY',\n      type: event.Type\n    };\n  }\n  if (event.Type === PeerResponse) {\n    return {\n      from: event.ID,\n      name: 'PEER_RESPONSE',\n      type: event.Type,\n      messageType: 0,\n      messageName: 'PUT_VALUE',\n      closer: (event.Responses || []).map(({\n        ID,\n        Addrs\n      }) => ({\n        id: ID,\n        multiaddrs: Addrs.map(addr => new Multiaddr(addr))\n      })),\n      providers: (event.Responses || []).map(({\n        ID,\n        Addrs\n      }) => ({\n        id: ID,\n        multiaddrs: Addrs.map(addr => new Multiaddr(addr))\n      }))\n    };\n  }\n  if (event.Type === FinalPeer) {\n    let peer = {\n      id: event.ID,\n      multiaddrs: []\n    };\n    if (event.Responses && event.Responses.length) {\n      peer = {\n        id: event.Responses[0].ID,\n        multiaddrs: event.Responses[0].Addrs.map(addr => new Multiaddr(addr))\n      };\n    }\n    return {\n      from: event.ID,\n      name: 'FINAL_PEER',\n      type: event.Type,\n      peer\n    };\n  }\n  if (event.Type === QueryError) {\n    return {\n      from: event.ID,\n      name: 'QUERY_ERROR',\n      type: event.Type,\n      error: new Error(event.Extra)\n    };\n  }\n  if (event.Type === Provider) {\n    return {\n      from: event.ID,\n      name: 'PROVIDER',\n      type: event.Type,\n      providers: event.Responses.map(({\n        ID,\n        Addrs\n      }) => ({\n        id: ID,\n        multiaddrs: Addrs.map(addr => new Multiaddr(addr))\n      }))\n    };\n  }\n  if (event.Type === Value) {\n    return {\n      from: event.ID,\n      name: 'VALUE',\n      type: event.Type,\n      value: uint8ArrayFromString(event.Extra, 'base64pad')\n    };\n  }\n  if (event.Type === AddingPeer) {\n    const peers = event.Responses.map(({\n      ID\n    }) => ID);\n    if (!peers.length) {\n      throw new Error('No peer found');\n    }\n    return {\n      name: 'ADDING_PEER',\n      type: event.Type,\n      peer: peers[0]\n    };\n  }\n  if (event.Type === DialingPeer) {\n    return {\n      name: 'DIALING_PEER',\n      type: event.Type,\n      peer: event.ID\n    };\n  }\n  throw new Error('Unknown DHT event type');\n};","map":{"version":3,"names":["fromString","uint8ArrayFromString","SendingQuery","PeerResponse","FinalPeer","QueryError","Provider","Value","AddingPeer","DialingPeer","Multiaddr","mapEvent","event","Type","to","ID","name","type","from","messageType","messageName","closer","Responses","map","Addrs","id","multiaddrs","addr","providers","peer","length","error","Error","Extra","value","peers"],"sources":["/home/juan-ubuntu/marketplace/node_modules/ipfs-http-client/esm/src/dht/map-event.js"],"sourcesContent":["import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport {\n  SendingQuery,\n  PeerResponse,\n  FinalPeer,\n  QueryError,\n  Provider,\n  Value,\n  AddingPeer,\n  DialingPeer\n} from './response-types.js';\nimport { Multiaddr } from 'multiaddr';\nexport const mapEvent = event => {\n  if (event.Type === SendingQuery) {\n    return {\n      to: event.ID,\n      name: 'SENDING_QUERY',\n      type: event.Type\n    };\n  }\n  if (event.Type === PeerResponse) {\n    return {\n      from: event.ID,\n      name: 'PEER_RESPONSE',\n      type: event.Type,\n      messageType: 0,\n      messageName: 'PUT_VALUE',\n      closer: (event.Responses || []).map(({ID, Addrs}) => ({\n        id: ID,\n        multiaddrs: Addrs.map(addr => new Multiaddr(addr))\n      })),\n      providers: (event.Responses || []).map(({ID, Addrs}) => ({\n        id: ID,\n        multiaddrs: Addrs.map(addr => new Multiaddr(addr))\n      }))\n    };\n  }\n  if (event.Type === FinalPeer) {\n    let peer = {\n      id: event.ID,\n      multiaddrs: []\n    };\n    if (event.Responses && event.Responses.length) {\n      peer = {\n        id: event.Responses[0].ID,\n        multiaddrs: event.Responses[0].Addrs.map(addr => new Multiaddr(addr))\n      };\n    }\n    return {\n      from: event.ID,\n      name: 'FINAL_PEER',\n      type: event.Type,\n      peer\n    };\n  }\n  if (event.Type === QueryError) {\n    return {\n      from: event.ID,\n      name: 'QUERY_ERROR',\n      type: event.Type,\n      error: new Error(event.Extra)\n    };\n  }\n  if (event.Type === Provider) {\n    return {\n      from: event.ID,\n      name: 'PROVIDER',\n      type: event.Type,\n      providers: event.Responses.map(({ID, Addrs}) => ({\n        id: ID,\n        multiaddrs: Addrs.map(addr => new Multiaddr(addr))\n      }))\n    };\n  }\n  if (event.Type === Value) {\n    return {\n      from: event.ID,\n      name: 'VALUE',\n      type: event.Type,\n      value: uint8ArrayFromString(event.Extra, 'base64pad')\n    };\n  }\n  if (event.Type === AddingPeer) {\n    const peers = event.Responses.map(({ID}) => ID);\n    if (!peers.length) {\n      throw new Error('No peer found');\n    }\n    return {\n      name: 'ADDING_PEER',\n      type: event.Type,\n      peer: peers[0]\n    };\n  }\n  if (event.Type === DialingPeer) {\n    return {\n      name: 'DIALING_PEER',\n      type: event.Type,\n      peer: event.ID\n    };\n  }\n  throw new Error('Unknown DHT event type');\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}