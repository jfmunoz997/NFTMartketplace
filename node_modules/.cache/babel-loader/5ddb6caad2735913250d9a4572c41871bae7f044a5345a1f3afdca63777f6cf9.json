{"ast":null,"code":"import debug from 'debug';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { textToUrlSafeRpc, rpcArrayToTextArray, rpcToBytes } from '../lib/http-rpc-wire-format.js';\nconst log = debug('ipfs-http-client:pubsub:subscribe');\nexport const createSubscribe = (options, subsTracker) => {\n  return configure(api => {\n    async function subscribe(topic, handler, options = {}) {\n      options.signal = subsTracker.subscribe(topic, handler, options.signal);\n      let done;\n      let fail;\n      const result = new Promise((resolve, reject) => {\n        done = resolve;\n        fail = reject;\n      });\n      const ffWorkaround = setTimeout(() => done(), 1000);\n      api.post('pubsub/sub', {\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: textToUrlSafeRpc(topic),\n          ...options\n        }),\n        headers: options.headers\n      }).catch(err => {\n        subsTracker.unsubscribe(topic, handler);\n        fail(err);\n      }).then(response => {\n        clearTimeout(ffWorkaround);\n        if (!response) {\n          return;\n        }\n        readMessages(response, {\n          onMessage: handler,\n          onEnd: () => subsTracker.unsubscribe(topic, handler),\n          onError: options.onError\n        });\n        done();\n      });\n      return result;\n    }\n    return subscribe;\n  })(options);\n};\nasync function readMessages(response, {\n  onMessage,\n  onEnd,\n  onError\n}) {\n  onError = onError || log;\n  try {\n    for await (const msg of response.ndjson()) {\n      try {\n        if (!msg.from) {\n          continue;\n        }\n        onMessage({\n          from: msg.from,\n          data: rpcToBytes(msg.data),\n          seqno: rpcToBytes(msg.seqno),\n          topicIDs: rpcArrayToTextArray(msg.topicIDs)\n        });\n      } catch (err) {\n        err.message = `Failed to parse pubsub message: ${err.message}`;\n        onError(err, false, msg);\n      }\n    }\n  } catch (err) {\n    if (!isAbortError(err)) {\n      onError(err, true);\n    }\n  } finally {\n    onEnd();\n  }\n}\nconst isAbortError = error => {\n  switch (error.type) {\n    case 'aborted':\n      return true;\n    case 'abort':\n      return true;\n    default:\n      return error.name === 'AbortError';\n  }\n};","map":{"version":3,"names":["debug","configure","toUrlSearchParams","textToUrlSafeRpc","rpcArrayToTextArray","rpcToBytes","log","createSubscribe","options","subsTracker","api","subscribe","topic","handler","signal","done","fail","result","Promise","resolve","reject","ffWorkaround","setTimeout","post","searchParams","arg","headers","catch","err","unsubscribe","then","response","clearTimeout","readMessages","onMessage","onEnd","onError","msg","ndjson","from","data","seqno","topicIDs","message","isAbortError","error","type","name"],"sources":["/home/juan-ubuntu/marketplace/node_modules/ipfs-http-client/esm/src/pubsub/subscribe.js"],"sourcesContent":["import debug from 'debug';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport {\n  textToUrlSafeRpc,\n  rpcArrayToTextArray,\n  rpcToBytes\n} from '../lib/http-rpc-wire-format.js';\nconst log = debug('ipfs-http-client:pubsub:subscribe');\nexport const createSubscribe = (options, subsTracker) => {\n  return configure(api => {\n    async function subscribe(topic, handler, options = {}) {\n      options.signal = subsTracker.subscribe(topic, handler, options.signal);\n      let done;\n      let fail;\n      const result = new Promise((resolve, reject) => {\n        done = resolve;\n        fail = reject;\n      });\n      const ffWorkaround = setTimeout(() => done(), 1000);\n      api.post('pubsub/sub', {\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: textToUrlSafeRpc(topic),\n          ...options\n        }),\n        headers: options.headers\n      }).catch(err => {\n        subsTracker.unsubscribe(topic, handler);\n        fail(err);\n      }).then(response => {\n        clearTimeout(ffWorkaround);\n        if (!response) {\n          return;\n        }\n        readMessages(response, {\n          onMessage: handler,\n          onEnd: () => subsTracker.unsubscribe(topic, handler),\n          onError: options.onError\n        });\n        done();\n      });\n      return result;\n    }\n    return subscribe;\n  })(options);\n};\nasync function readMessages(response, {onMessage, onEnd, onError}) {\n  onError = onError || log;\n  try {\n    for await (const msg of response.ndjson()) {\n      try {\n        if (!msg.from) {\n          continue;\n        }\n        onMessage({\n          from: msg.from,\n          data: rpcToBytes(msg.data),\n          seqno: rpcToBytes(msg.seqno),\n          topicIDs: rpcArrayToTextArray(msg.topicIDs)\n        });\n      } catch (err) {\n        err.message = `Failed to parse pubsub message: ${ err.message }`;\n        onError(err, false, msg);\n      }\n    }\n  } catch (err) {\n    if (!isAbortError(err)) {\n      onError(err, true);\n    }\n  } finally {\n    onEnd();\n  }\n}\nconst isAbortError = error => {\n  switch (error.type) {\n  case 'aborted':\n    return true;\n  case 'abort':\n    return true;\n  default:\n    return error.name === 'AbortError';\n  }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}