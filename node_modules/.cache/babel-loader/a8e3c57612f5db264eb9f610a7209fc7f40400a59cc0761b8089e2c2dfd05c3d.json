{"ast":null,"code":"import { modeToString } from './mode-to-string.js';\nimport { parseMtime } from '../lib/parse-mtime.js';\nexport function toUrlSearchParams({\n  arg,\n  searchParams,\n  hashAlg,\n  mtime,\n  mode,\n  ...options\n} = {}) {\n  if (searchParams) {\n    options = {\n      ...options,\n      ...searchParams\n    };\n  }\n  if (hashAlg) {\n    options.hash = hashAlg;\n  }\n  if (mtime != null) {\n    mtime = parseMtime(mtime);\n    options.mtime = mtime.secs;\n    options.mtimeNsecs = mtime.nsecs;\n  }\n  if (mode != null) {\n    options.mode = modeToString(mode);\n  }\n  if (options.timeout && !isNaN(options.timeout)) {\n    options.timeout = `${options.timeout}ms`;\n  }\n  if (arg === undefined || arg === null) {\n    arg = [];\n  } else if (!Array.isArray(arg)) {\n    arg = [arg];\n  }\n  const urlSearchParams = new URLSearchParams(options);\n  arg.forEach(arg => urlSearchParams.append('arg', arg));\n  return urlSearchParams;\n}","map":{"version":3,"names":["modeToString","parseMtime","toUrlSearchParams","arg","searchParams","hashAlg","mtime","mode","options","hash","secs","mtimeNsecs","nsecs","timeout","isNaN","undefined","Array","isArray","urlSearchParams","URLSearchParams","forEach","append"],"sources":["/home/juan-ubuntu/marketplace/node_modules/ipfs-http-client/esm/src/lib/to-url-search-params.js"],"sourcesContent":["import { modeToString } from './mode-to-string.js';\nimport { parseMtime } from '../lib/parse-mtime.js';\nexport function toUrlSearchParams({arg, searchParams, hashAlg, mtime, mode, ...options} = {}) {\n  if (searchParams) {\n    options = {\n      ...options,\n      ...searchParams\n    };\n  }\n  if (hashAlg) {\n    options.hash = hashAlg;\n  }\n  if (mtime != null) {\n    mtime = parseMtime(mtime);\n    options.mtime = mtime.secs;\n    options.mtimeNsecs = mtime.nsecs;\n  }\n  if (mode != null) {\n    options.mode = modeToString(mode);\n  }\n  if (options.timeout && !isNaN(options.timeout)) {\n    options.timeout = `${ options.timeout }ms`;\n  }\n  if (arg === undefined || arg === null) {\n    arg = [];\n  } else if (!Array.isArray(arg)) {\n    arg = [arg];\n  }\n  const urlSearchParams = new URLSearchParams(options);\n  arg.forEach(arg => urlSearchParams.append('arg', arg));\n  return urlSearchParams;\n}"],"mappings":"AAAA,SAASA,YAAY,QAAQ,qBAAqB;AAClD,SAASC,UAAU,QAAQ,uBAAuB;AAClD,OAAO,SAASC,iBAAiBA,CAAC;EAACC,GAAG;EAAEC,YAAY;EAAEC,OAAO;EAAEC,KAAK;EAAEC,IAAI;EAAE,GAAGC;AAAO,CAAC,GAAG,CAAC,CAAC,EAAE;EAC5F,IAAIJ,YAAY,EAAE;IAChBI,OAAO,GAAG;MACR,GAAGA,OAAO;MACV,GAAGJ;IACL,CAAC;EACH;EACA,IAAIC,OAAO,EAAE;IACXG,OAAO,CAACC,IAAI,GAAGJ,OAAO;EACxB;EACA,IAAIC,KAAK,IAAI,IAAI,EAAE;IACjBA,KAAK,GAAGL,UAAU,CAACK,KAAK,CAAC;IACzBE,OAAO,CAACF,KAAK,GAAGA,KAAK,CAACI,IAAI;IAC1BF,OAAO,CAACG,UAAU,GAAGL,KAAK,CAACM,KAAK;EAClC;EACA,IAAIL,IAAI,IAAI,IAAI,EAAE;IAChBC,OAAO,CAACD,IAAI,GAAGP,YAAY,CAACO,IAAI,CAAC;EACnC;EACA,IAAIC,OAAO,CAACK,OAAO,IAAI,CAACC,KAAK,CAACN,OAAO,CAACK,OAAO,CAAC,EAAE;IAC9CL,OAAO,CAACK,OAAO,GAAI,GAAGL,OAAO,CAACK,OAAS,IAAG;EAC5C;EACA,IAAIV,GAAG,KAAKY,SAAS,IAAIZ,GAAG,KAAK,IAAI,EAAE;IACrCA,GAAG,GAAG,EAAE;EACV,CAAC,MAAM,IAAI,CAACa,KAAK,CAACC,OAAO,CAACd,GAAG,CAAC,EAAE;IAC9BA,GAAG,GAAG,CAACA,GAAG,CAAC;EACb;EACA,MAAMe,eAAe,GAAG,IAAIC,eAAe,CAACX,OAAO,CAAC;EACpDL,GAAG,CAACiB,OAAO,CAACjB,GAAG,IAAIe,eAAe,CAACG,MAAM,CAAC,KAAK,EAAElB,GAAG,CAAC,CAAC;EACtD,OAAOe,eAAe;AACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}