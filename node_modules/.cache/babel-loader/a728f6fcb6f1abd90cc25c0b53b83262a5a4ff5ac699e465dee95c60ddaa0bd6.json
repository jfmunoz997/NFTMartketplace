{"ast":null,"code":"var _jsxFileName = \"/home/juan-ubuntu/marketplace/src/frontend/components/Create.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { ethers } from 'ethers';\nimport { Row, Form, Button } from 'react-bootstrap';\nimport { create as ipfsHttpClient } from 'ipfs-http-client';\nimport { Buffer } from 'buffer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ipfsClient = require(\"ipfs-http-client\");\nconst Create = ({\n  marketplace,\n  nft\n}) => {\n  _s();\n  const [image, setImage] = useState('');\n  const [price, setPrice] = useState(null);\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n  const uploadToIPFS = async event => {\n    event.preventDefault();\n    const file = event.target.files[0];\n    if (typeof file !== 'undefined') {\n      try {\n        const projectId = '2WEIAWRHSKRNcw7GKu6KUW6G6Ev';\n        const projectSecret = 'a8fb55663ed3aa2565e5de9f12973d50';\n        const auth = 'Basic ' + Buffer.from(projectId + ':' + projectSecret).toString('base64');\n        const result = ipfsClient.create({\n          host: 'ipfs.infura.io',\n          port: 5001,\n          protocol: 'https',\n          headers: {\n            authorization: auth\n          }\n        });\n        setImage(`https://erre.infura-ipfs.io/ipfs/${result.path}`);\n      } catch (error) {\n        console.log(\"ipfs image upload error: \", error);\n      }\n    }\n  };\n  const createNFT = async () => {\n    if (!image || !price || !name || !description) return;\n    try {\n      const result = await client.add(JSON.stringify({\n        image,\n        price,\n        name,\n        description\n      }));\n      mintThenList(result);\n    } catch (error) {\n      console.log(\"ipfs uri uload error: \", error);\n    }\n  };\n  const mintThenList = async result => {\n    const uri = `https://ipfs.infura.io/ipfs/${result.path}`;\n    await (await nft.mint(uri)).wait();\n    const id = await nft.tokenCount();\n    await await nft.setApprovalForAll(marketplace.address, true);\n    const listingPrice = ethers.utils.parseEther(price.toString());\n    await (await marketplace.makeItem(nft.address, id, listingPrice)).wait();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid mt-5\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 mx-auto\",\n        style: {\n          maxWidth: '1000px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content mx-auto\",\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            className: \"g-4\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"file\",\n              required: true,\n              name: \"file\",\n              onChange: uploadToIPFS\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              onChange: e => setName(e.target.value),\n              size: \"lg\",\n              required: true,\n              type: \"text\",\n              placeholder: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              onChange: e => setDescription(e.target.value),\n              size: \"lg\",\n              required: true,\n              as: \"textarea\",\n              placeholder: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              onChange: e => setPrice(e.target.value),\n              size: \"lg\",\n              required: true,\n              type: \"number\",\n              placeholder: \"Price (ETH)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"g-grid px-0\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: createNFT,\n                variant: \"primary\",\n                size: \"lg\",\n                children: \"Create and list NFT!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n_s(Create, \"CejF301mm3S45QBEXO/SVXCwDzQ=\");\n_c = Create;\nexport default Create;\nvar _c;\n$RefreshReg$(_c, \"Create\");","map":{"version":3,"names":["useState","ethers","Row","Form","Button","create","ipfsHttpClient","Buffer","jsxDEV","_jsxDEV","ipfsClient","require","Create","marketplace","nft","_s","image","setImage","price","setPrice","name","setName","description","setDescription","uploadToIPFS","event","preventDefault","file","target","files","projectId","projectSecret","auth","from","toString","result","host","port","protocol","headers","authorization","path","error","console","log","createNFT","client","add","JSON","stringify","mintThenList","uri","mint","wait","id","tokenCount","setApprovalForAll","address","listingPrice","utils","parseEther","makeItem","className","children","role","style","maxWidth","Control","type","required","onChange","fileName","_jsxFileName","lineNumber","columnNumber","e","value","size","placeholder","as","onClick","variant","_c","$RefreshReg$"],"sources":["/home/juan-ubuntu/marketplace/src/frontend/components/Create.js"],"sourcesContent":["import { useState } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport { Row, Form, Button } from 'react-bootstrap';\r\nimport { create as ipfsHttpClient } from 'ipfs-http-client';\r\nimport { Buffer } from 'buffer';\r\nconst ipfsClient = require(\"ipfs-http-client\");\r\n\r\nconst Create = ({ marketplace, nft }) => {\r\n    const [image, setImage] = useState('');\r\n    const [price, setPrice] = useState(null);\r\n    const [name, setName] = useState('');\r\n    const [description, setDescription] = useState('');\r\n\r\n    const uploadToIPFS = async (event) => {\r\n        event.preventDefault();\r\n        const file = event.target.files[0];\r\n        if (typeof file !== 'undefined') {\r\n            try {\r\n                const projectId = '2WEIAWRHSKRNcw7GKu6KUW6G6Ev';\r\n                const projectSecret = 'a8fb55663ed3aa2565e5de9f12973d50';\r\n                const auth =\r\n                'Basic ' + Buffer.from(projectId + ':' + projectSecret).toString('base64');\r\n                const result = ipfsClient.create({\r\n                  host: 'ipfs.infura.io',\r\n                  port: 5001,\r\n                  protocol: 'https',\r\n                  headers: {\r\n                    authorization: auth,\r\n                  },\r\n                });\r\n\r\n                setImage(`https://erre.infura-ipfs.io/ipfs/${result.path}`);\r\n            } catch (error) {\r\n                console.log(\"ipfs image upload error: \", error);\r\n            }\r\n        }\r\n    }\r\n    const createNFT = async () => {\r\n        if (!image || !price || !name || !description) return\r\n        try {\r\n            const result = await client.add(JSON.stringify({ image, price, name, description }));\r\n            mintThenList(result);\r\n        } catch (error) {\r\n            console.log(\"ipfs uri uload error: \", error);\r\n        }\r\n    }\r\n    const mintThenList = async (result) => {\r\n        const uri = `https://ipfs.infura.io/ipfs/${result.path}`;\r\n        await (await nft.mint(uri)).wait();\r\n        const id = await nft.tokenCount();\r\n        await (await nft.setApprovalForAll(marketplace.address, true));\r\n        const listingPrice = ethers.utils.parseEther(price.toString());\r\n        await (await marketplace.makeItem(nft.address, id, listingPrice)).wait();\r\n    }\r\n\r\n    return (\r\n        <div className=\"container-fluid mt-5\">\r\n            <div className='row'>\r\n                <main role=\"main\" className='col-lg-12 mx-auto' style={{ maxWidth: '1000px' }}>\r\n                    <div className='content mx-auto'>\r\n                        <Row className='g-4'>\r\n                            <Form.Control\r\n                                type=\"file\"\r\n                                required\r\n                                name=\"file\"\r\n                                onChange={uploadToIPFS} />\r\n                            <Form.Control onChange={(e) => setName(e.target.value)} size=\"lg\" required type=\"text\" placeholder=\"Name\" />\r\n                            <Form.Control onChange={(e) => setDescription(e.target.value)} size=\"lg\" required as=\"textarea\" placeholder=\"Description\"/>\r\n                            <Form.Control onChange={(e) => setPrice(e.target.value)} size=\"lg\" required type=\"number\" placeholder='Price (ETH)' />\r\n                            <div className='g-grid px-0'>\r\n                                <Button onClick={createNFT} variant=\"primary\" size=\"lg\">\r\n                                    Create and list NFT!\r\n                                </Button>\r\n                            </div>\r\n                        </Row>\r\n                    </div>\r\n                </main>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Create;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}